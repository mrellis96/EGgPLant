#!/bin/bash
# EcoGenetics Pipeline Interactive
echo "EcoGenetics Lab Interactive Pipeline V4.0.1 - Developed by Owen Holland and Scripted by Morgan Ellis"

usage()
{
echo
echo "EcoGenetics Lab Interactive Pipeline for Dereplicating Sequences"
echo 
echo "Please follow the prompts to Trim, Filter and dereplicate your sequences"
}

citation()
{ 
echo
echo "Citations"
echo
echo "Cutadapt"
echo "Martin M (2011) Cutadapt removes adapter sequences from high-throughput sequencing reads. EMBnet journal 17:10-12"
echo
echo "R base"
echo "R Core Team (2021). R: A language and environment for statistical computing. R Foundation for Statistical Computing, Vienna, Austria. URL https://www.R-project.org/."
echo
echo "dada2"
echo "Callahan BJ, McMurdie PJ, Rosen MJ, Han AW, Johnson AJA, Holmes SP (2016). “DADA2: High-resolution sample inference from Illumina amplicon data.” Nature Methods, 13, 581-583. doi: 10.1038/nmeth.3869 (URL: https://doi.org/10.1038/nmeth.3869)."
echo
echo "vSearch"
echo "Rognes, T., Flouri, T., Nichols, B., Quince, C. and Mahé, F., 2016. VSEARCH: a versatile open source tool for metagenomics. PeerJ, 4, p.e2584."
} 

while getopts "c h" opt; do
        case $opt in
        c) citation
        exit
        ;;
        h) usage
        exit
        ;;
        \?) echo 
        echo "Invalid Option"
        usage
        exit
        ;;
        esac
done


echo "What directory are your sequences in?"
read raw

if [ ! -d "$raw" ]
	then
	echo "ERROR: Directory '$raw' Does Not Exist"
	echo "What directory are your sequences in?"
	read $raw
	if [ ! -d "$raw" ]
		then
		echo "ERROR: Directory '$raw' Does Not Exist"
		echo "Check the directory and try again"
		exit
	fi		
fi

echo "Are the Single ends, or Paired ends? (S/P)"
read ends
if [[ $ends == 'P' ]]
        then
        echo "Paired End Reads"
        elif [[ $ends == 'S' ]]
        	then
        	echo "Single End Reads"
        else
        	echo "Unregocgnised input. Please use S or P (case sensitive)"
        	read ends
        	if [[ $ends == 'P' ]]
        		then
        		echo "Paired End Reads"
        	elif [[ $ends == 'S' ]]
        		then
        		echo "Single End Reads"
        		else
        	echo "Unrecognised input. Exiting"
        		exit	
        fi
fi

if [ -d "outputs/" ]
	then
	echo "Outputs directory already exists. Continuing WILL OVERWRITE data"
	echo "Do you want to Continue? (Y/N/C)"
	read 
	if [[ $REPLY =~ ^[Nn]$ ]]; then
		exit
	elif [[ $REPLY =~ ^[Cc]$ ]]; then
		exit
	elif [[ $REPLY =~ ^[Yy]$ ]]; then
		rm -r outputs/; mkdir outputs/
	fi
else
mkdir outputs
fi	

echo "Do you need to remove Poly-Tails (repeated nucleotide bases at the end of a sequence)? (Y/N)"
read
if [[ $REPLY =~ ^[Yy]$ ]]
	then
	echo "Which Base?"
	read poly
	mkdir "$raw"_Poly/
	cd $raw
	for i in *.fastq.gz; 
	do SAMPLE=$(echo ${i} | sed "s/.fastq\.gz//") ; 
	cutadapt -j 8 -O 6 -g "$poly""$poly""$poly""$poly""$poly""$poly" -o ../"$raw"_Poly/${SAMPLE}.fastq.gz ${SAMPLE}.fastq.gz;
	done |& tee ../outputs/cutadapt.log.txt
	cd ../
	raw=""$raw"_Poly"
	echo "The sequences without Poly-"$poly"-Tails are in "$raw"" 
fi

echo "Do you need to remove primers? (Y/N)"
read
if [[ $REPLY =~ ^[Yy]$ ]]
	then
	if [[ $ends == 'P' ]]
        	then
        	echo "Please enter Forawrd Primer (5'-3')"
        	read fwdp
        	echo "Please enter Reverse Primer (5'-3')"
        	read revp
        	echo "Please enter the Minimum overlap required between the Primer and the Sequence"
        	read minO
        	echo "Please enter the Minimum sequence length allowed"
        	read minS
		mkdir "$raw"_Trimmed/
		cd $raw
		for i in *_R1_001.fastq.gz; 
		do SAMPLE=$(echo ${i} | sed "s/_R1_\001\.fastq\.gz//") ; 
		cutadapt -j 8 -m "$minS" -O "$minO" -g "$fwdp" -G "$revp" --trimmed-only -o ../"$raw"_Trimmed/${SAMPLE}_R1_001.fastq.gz -p ../"$raw"_Trimmed/${SAMPLE}_R2_001.fastq.gz ${SAMPLE}_R1_001.fastq.gz ${SAMPLE}_R2_001.fastq.gz;
		done |& tee -a ../outputs/cutadapt.log.txt
		cd ../
		raw=""$raw"_PrimerTrimmed"     
        elif [[ $ends == 'S' ]]
        	then
        	echo "Please enter Forawrd Primer (5'-3')"
        	read fwdp
        	echo "Please enter the Minimum overlap required between the Primer and the Sequence"
        	read minO
        	echo "Please enter the Minimum sequence length allowed"
        	read minS
        	mkdir "$raw"_Trimmed/
		cd $raw
		for i in *_R1_001.fastq.gz; 
		do SAMPLE=$(echo ${i} | sed "s/_R1_\001\.fastq\.gz//") ; 
		cutadapt -j 8 -m "$minS" -O "$minO" -g "$fwdp" --trimmed-only -o ../"$raw"_Trimmed/${SAMPLE}_R1_001.fastq.gz ${SAMPLE}_R1_001.fastq.gz;
		done |& tee -a ../outputs/cutadapt.log.txt
		cd ../
		raw=""$raw"_Trimmed"	
	fi	
echo "Trimmed sequences are in "$raw""
fi

if [ ! -d "forward/" ]
	then #sorting step
	mkdir forward
	cp "$raw"/*R1_001.fastq.gz forward/
		count=`ls  -1 "$raw"/*R2_001.fastq.gz 2>/dev/null | wc -l` ; 
		if [ $count != 0 ] #checks if Rawfastq has reverse reads
			then
			mkdir reverse
			cp "$raw"/*R2_001.fastq.gz reverse/
		fi
	else
	echo "Forward Directory exists"
	echo "Do you want to overwrite? (Y/N/C)"
	read
	if [[ $REPLY =~ ^[Yy]$ ]]; then
	rm -r forward
	mkdir forward
	cp "$raw"/*R1_001.fastq.gz forward/
		count=`ls  -1 "$raw"/*R2_001.fastq.gz 2>/dev/null | wc -l` ; 
		if [ $count != 0 ] #checks if Rawfastq has reverse reads
			then
			if [ -d "reverse/" ]; then
			rm -r reverse; mkdir reverse
			else
			mkdir reverse
			fi
		cp "$raw"/*R2_001.fastq.gz reverse/
		fi
	elif [[ $REPLY =~ ^[Cc]$ ]]; then
	exit	
	fi
fi

echo "Create Quality Plots? (Y/N)"
read
if [[ $REPLY =~ ^[Yy]$ ]]
	then
	if [[ "$(uname)" == "Linux" ]]; then
		if [[ $ends == 'P' ]]; then
		EGPEPQ
		elif [[ $ends == 'S' ]]; then
		EGSEPQ
		fi
	elif [[ "$(uname)" == "Darwin" ]]; then
		if [[ $ends == 'P' ]]; then
		EGPEPQM
		elif [[ $ends == 'S' ]]; then
		EGSEPQM
		fi
	fi
	if [[ ! -f "outputs/qPlot_fwd.tiff" ]];
		then
		echo 
		echo "ERROR"
		echo "Check R output above and try again"
		exit
	fi
fi

echo "Please check quality plots to determine where to Truncate values"
echo
echo "Where would you like to Truncate the sequences?"
if [[ $ends == 'P' ]]; then
	echo "Forward Truncation?"
	read fwdT
	echo "Reverse Truncation?"
	read revT	
elif [[ $ends == 'S' ]]; then
	read fwdT
fi
echo "What is the minimum number of reads per sequences allowed after chimera removal"
read minR


if [[ "$(uname)" == "Linux" ]]; then
	if [[ $ends == 'P' ]]; then
		EGPEP --fwdT $fwdT --revT $revT --minR $minR |& tee -a outputs/R.log.txt
	elif [[ $ends == 'S' ]]; then
		EGSEP --fwdT $fwdT --minR $minR |& tee -a outputs/R.log.txt
	fi
elif [[ "$(uname)" == "Darwin" ]]; then
	if [[ $ends == 'P' ]]; then
		EGPEPM --fwdT $fwdT --revT $revT --minR $minR |& tee -a outputs/R.log.txt
	elif [[ $ends == 'S' ]]; then
		EGSEPM --fwdT $fwdT --minR $minR |& tee -a outputs/R.log.txt
	fi
fi
if [[ ! -f "outputs/Pipeline_Results.csv" ]];
	then
	echo 
	echo "ERROR"
	echo "Check R output above and try again"
	exit
fi
#copy and remove site names
awk -F"," 'FNR == 1 { print }' outputs/Pipeline_Results.csv >outputs/site.tmp
tail -n +2 outputs/Pipeline_Results.csv > outputs/pipe.tmp
#relabel as ASV1-ASVN
awk -F"," '{ print "ASV"NR",", $0}' outputs/pipe.tmp >outputs/pipe.tmp2
#remove Sequence
cut --complement -d',' -f2 outputs/pipe.tmp2 >outputs/pipe.tmp3
#add empty row
awk 'BEGIN{ print""}1' outputs/pipe.tmp3 >outputs/pipe.tmp4
#Paste all files together
paste outputs/site.tmp outputs/pipe.tmp4 >outputs/Pipeline_Results.csv
rm outputs/site.tmp outputs/pipe.tmp outputs/pipe.tmp2 outputs/pipe.tmp3 outputs/pipe.tmp4

echo "Do you want to cluster ASVs to OTUs (Y/N)"
read
if [[ $REPLY =~ ^[Yy]$ ]]; then
	echo "What Similarity Threshold? (0-1)"
	read otu
	vsearch --cluster_size outputs/*.fa \
	--id "$otu" \
	--strand plus \
	--sizein \
	--sizeout \
	--fasta_width 0 \
	--relabel OTU_ \
	--centroids outputs/OTU.fasta \
	--otutabout outputs/OTU.txt \
	
	#Relabel OTU and ASV
	totcol=`head -1 outputs/OTU.txt | awk -F"\t" '{print NF}'`
	awk -F"\t" '{print $1}' outputs/OTU.txt > outputs/OTU.tmp

	for ((i=2;i<=$totcol;i++))
	do
	ID=`awk -F"\t" -v var="$i" '{print $(var)}' outputs/OTU.txt | head -1`
	OTU=`awk -F"\t" -v var="$i" '{if ($(var) == "1") print $1}' outputs/OTU.txt | perl -pe 's/\n/_/g' | perl -pe 's/_$//g'`
	awk -F"\t" -v var="$i" '{print $(var)}' outputs/OTU.txt | perl -pe "s/$ID/$ID\n$OTU/g" > outputs/OTU.tmp2
	paste outputs/OTU.tmp outputs/OTU.tmp2 > outputs/OTU.tmp3
	mv outputs/OTU.tmp3 outputs/OTU.tmp
	rm outputs/OTU.tmp2
	done
	cut -f2- outputs/OTU.tmp > outputs/OTU.tmp2
	head -2 outputs/OTU.tmp2 > outputs/OTU.tmp3
	mv outputs/OTU.tmp3 outputs/OTU.tmp
	rm outputs/OTU.tmp2
	#Transpose
	awk '
	{
	    for (i=1; i<=NF; i++)  {
	        a[NR,i] = $i
	    }
	}
	NF>p { p = NF }
	END {
	    for(j=1; j<=p; j++) {
	        str=a[1,j]
	        for(i=2; i<=NR; i++){
	            str=str" "a[i,j];
 	       }
        print str
	    }
	}' outputs/OTU.tmp > outputs/OTU.ASV.txt
	rm outputs/OTU.tmp
	#Copy and remove site names
	awk -F"," 'FNR == 1 { print }' outputs/Pipeline_Results.csv >outputs/site.tmp
	awk -F"," '{ print "," $0}' outputs/site.tmp >outputs/site.tmp2
	tail -n +2 outputs/Pipeline_Results.csv > outputs/pipe.tmp
	#sort asvoutput (other file) by ASV (ASV1,ASV2...ASV10)
	sort -V outputs/OTU.ASV.txt >outputs/otu.tmp
	#Remove ASV
	awk '{print $2}' outputs/otu.tmp >outputs/otu.tmp2
	#Add empty row and column
	awk -F"," '{ print "," $0}' outputs/pipe.tmp >outputs/pipe.tmp2
	#Paste all files together
	paste outputs/otu.tmp2 outputs/pipe.tmp2 >outputs/otu.tmp3
	awk 'BEGIN{print""}1' outputs/otu.tmp3 >outputs/otu.tmp4
	paste outputs/site.tmp2 outputs/otu.tmp4 >outputs/otu.csv
	rm outputs/*tmp*
	
	echo "OTU-ASV found in outputs/OTU-ASV.txt, OTU's added to Pipeline_Results in OTU.csv"
else
echo "Results found in Pipeline_Results.csv"
fi

echo "Thank You for using the EcoGenetics Lab Interactive Pipeline"

